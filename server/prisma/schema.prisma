generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* enum UserRole {
  admin
  gestionnaireStock
  operateur
  fournisseur
} */

enum SupplierStatus {
  ACTIF      @map("actif")
  EN_ATTENTE @map("en_attente")
}

enum ExpenseCategory {
  Transport
  Électricité
  Maintenance
  Assurance
  Pertes
}

enum PurchaseOrderStatus {
  EN_ATTENTE @map("en_attente")
  EN_COURS   @map("en_cours")
  LIVREE     @map("livrée")
  ANNULEE    @map("annulée")
}

model Users {
  userId        String        @id @default(uuid())
  name          String
  email         String        @unique
  role           String// UserRole Utiliser l'enum UserRole
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Warehouses    Warehouses[]  @relation("manager")
  WarehouseOperator WarehouseOperator[]
  PurchaseOrders PurchaseOrder[]
}

model Suppliers {
  supplierId String   @id @default(uuid())
  name       String
  email      String   @unique
  phone      String?
  address    String?
  status     SupplierStatus // Utiliser l'enum SupplierStatus
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Purchases      Purchases[]
  PurchaseOrders PurchaseOrder[]
}

model Warehouses {
  warehouseId String   @id @default(uuid())
  name        String
  location    String
  managerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  manager     Users      @relation("manager", fields: [managerId], references: [userId])
  operators   WarehouseOperator[]
  ProductWarehouse ProductWarehouse[]
  Sales           Sales[]
  Purchases       Purchases[]
  PurchaseOrders  PurchaseOrder[]
  SalesByWarehouse SalesByWarehouse[]
  PurchasesByWarehouse PurchasesByWarehouse[]
}

model WarehouseOperator {
  warehouseId String
  userId      String

  warehouse   Warehouses @relation(fields: [warehouseId], references: [warehouseId])
  user        Users      @relation(fields: [userId], references: [userId])

  @@id([warehouseId, userId])
}

model Products {
  productId     String      @id @default(uuid())
  name          String
  category      String
  brand         String
  price         Float
  rating        Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ProductWarehouse ProductWarehouse[]
  Sales           Sales[]
  Purchases       Purchases[]
  PurchaseOrders  PurchaseOrder[]
}

model ProductWarehouse {
  productId    String
  warehouseId  String
  stockQuantity Int

  product      Products   @relation(fields: [productId], references: [productId])
  warehouse    Warehouses @relation(fields: [warehouseId], references: [warehouseId])

  @@id([productId, warehouseId])
}

model Sales {
  saleId      String   @id @default(uuid())
  productId   String
  warehouseId String
  timestamp   DateTime @default(now())
  quantity    Int
  unitPrice   Float
  totalAmount Float

  product     Products   @relation(fields: [productId], references: [productId])
  warehouse   Warehouses @relation(fields: [warehouseId], references: [warehouseId])
}

model Purchases {
  purchaseId  String   @id @default(uuid())
  productId   String
  warehouseId String
  supplierId  String
  timestamp   DateTime @default(now())
  quantity    Int
  unitCost    Float
  totalCost   Float

  product     Products   @relation(fields: [productId], references: [productId])
  warehouse   Warehouses @relation(fields: [warehouseId], references: [warehouseId])
  supplier    Suppliers  @relation(fields: [supplierId], references: [supplierId])
}

model PurchaseOrder {
  purchaseOrderId String              @id @default(uuid())
  productId       String
  warehouseId     String
  userId          String
  supplierId      String?
  quantity        Int
  status          PurchaseOrderStatus @default(EN_ATTENTE)
  timestamp       DateTime            @default(now())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  product         Products   @relation(fields: [productId], references: [productId])
  warehouse       Warehouses @relation(fields: [warehouseId], references: [warehouseId])
  user            Users      @relation(fields: [userId], references: [userId])
  supplier        Suppliers? @relation(fields: [supplierId], references: [supplierId])
}

model Expenses {
  expenseId   String         @id @default(uuid())
  category    ExpenseCategory
  amount      Float
  description String?
  timestamp   DateTime       @default(now())
}

model SalesSummary {
  salesSummaryId   String   @id @default(uuid())
  totalValue       Float
  changePercentage Float?
  date             DateTime

  SalesByWarehouse SalesByWarehouse[]
}

model PurchaseSummary {
  purchaseSummaryId String   @id @default(uuid())
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime

  PurchasesByWarehouse PurchasesByWarehouse[]
}

model SalesByWarehouse {
  salesByWarehouseId String   @id @default(uuid())
  salesSummaryId     String
  warehouseId        String
  totalValue         Float
  date               DateTime

  salesSummary       SalesSummary @relation(fields: [salesSummaryId], references: [salesSummaryId])
  warehouse          Warehouses   @relation(fields: [warehouseId], references: [warehouseId])
}

model PurchasesByWarehouse {
  purchasesByWarehouseId String   @id @default(uuid())
  purchaseSummaryId      String
  warehouseId            String
  totalPurchased         Float
  date                   DateTime

  purchaseSummary        PurchaseSummary @relation(fields: [purchaseSummaryId], references: [purchaseSummaryId])
  warehouse              Warehouses      @relation(fields: [warehouseId], references: [warehouseId])
}

model ExpenseSummary {
  expenseSummaryId  String              @id @default(uuid())
  totalExpenses     Float
  lastExpenseDate   DateTime?
  numberOfExpenses  Int?
  date              DateTime
  changePercentage  Float?

  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id @default(uuid())
  expenseSummaryId    String
  category            ExpenseCategory
  amount              Float
  date                DateTime

  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}